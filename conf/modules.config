/*
========================================================================================
    Config file for defining DSL2 per module options
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir  = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    // quantms.nf includes
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir  = [
            path: { "${params.outdir}/pipeline_info" },
            mode: params.publish_dir_mode,
            pattern: '*_versions.yml'
        ]
    }

    // Local Subworkflows
    // INPUT_CHECK
    withName: 'NFCORE_QUANTMS:QUANTMS:INPUT_CHECK:SAMPLESHEET_CHECK' {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // SDRFPARSING
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:SDRFPARSING' {
        ext.args    = 'convert-openms -t2 -l'
        publishDir  = [
            path: { "${params.outdir}/sdrfparsing" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // PREPROCESS_EXPDESIGN
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:PREPROCESS_EXPDESIGN' {
        publishDir  = [
            path: { "${params.outdir}/preprocessexpdesign" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // THERMORAWFILEPARSER
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:THERMORAWFILEPARSER' {
        publishDir  = [
            path: { "${params.outdir}/thermorawfileparser" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // MZMLINDEXING
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:MZMLINDEXING' {
        publishDir  = [
            path: { "${params.outdir}/mzmlindexing" },
            mode: params.publish_dir_mode,
            pattern: '*.log',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // OPENMSPEAKPICKER
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:OPENMSPEAKPICKER' {
        publishDir  = [
            path: { "${params.outdir}/openmspeakpicker" },
            mode: params.publish_dir_mode,
            pattern: '*.log',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // DECOYDATABASE
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:DECOYDATABASE' {
        publishDir  = [
            path: { "${params.outdir}/decoydatabase" },
            mode: params.publish_dir_mode,
            pattern: '*.log',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // SEARCHENGINEMSGF
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:SEARCHENGINEMSGF' {
        publishDir  = [
            path: { "${params.outdir}/searchenginemsgf" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // SEARCHENGINECOMET
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:SEARCHENGINECOMET' {
        publishDir  = [
            path: { "${params.outdir}/searchenginecomet" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // INDEXPEPTIDES
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:INDEXPEPTIDES' {
        publishDir  = [
            path: { "${params.outdir}/indexpeptides" },
            mode: params.publish_dir_mode,
            pattern: '*.log',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // EXTRACTPSMFEATURE
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:EXTRACTPSMFEATURE' {
        publishDir  = [
            path: { "${params.outdir}/extractpsmfeature" },
            mode: params.publish_dir_mode,
            pattern: '*.log',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // PERCOLATOR
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:PERCOLATOR' {
        publishDir  = [
            path: { "${params.outdir}/percolator" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // FDRIDPEP
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:FDRIDPEP' {
        publishDir  = [
            path: { "${params.outdir}/fdridpep" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // IDPEP
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:PSMFDRCONTROL:IDPEP' {
        publishDir  = [
            path: { "${params.outdir}/idpep" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // CONSENSUSID
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:CONSENSUSID' {
        publishDir  = [
            path: { "${params.outdir}/consensusid" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // IDSCORESWITCHER
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:ID:PSMFDRCONTROL:IDSCORESWITCHER' {
        ext.args    = [
            "-new_score_orientation lower_better",
            "-old_score \"Posterior Error Probability\"",
            "-new_score_type q-value"
        ].join(' ').trim()
        publishDir  = [
            path: { "${params.outdir}/idscoreswitcher" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // FDRCONSENSUSID
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:FDRCONSENSUSID' {
        publishDir  = [
            path: { "${params.outdir}/fdrconsensusid" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // IDFILTER
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:ID:PSMFDRCONTROL:IDFILTER' {
        ext.args    = "-score:pep \"$params.psm_pep_fdr_cutoff\""
        ext.suffix  = '.idXML'
        publishDir  = [
            path: { "${params.outdir}/idfilter" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // IDSCORESWITCHERFORLUCIPHOR
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:IDSCORESWITCHERFORLUCIPHOR' {
        ext.args    = [
            "-new_score_orientation lower_better",
            "-old_score \"q-value\"",
            "-new_score_type Posterior Error Probability"
        ].join(' ').trim()
        publishDir  = [
            path: { "${params.outdir}/idscoreswitcherforluciphor" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // LUCIPHORADAPTER
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:LUCIPHORADAPTER' {
        publishDir  = [
            path: { "${params.outdir}/luciphoradapter" },
            mode: params.publish_dir_mode,
            pattern: '.log',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // PROTEOMICSLFQ
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:PROTEOMICSLFQ' {
        publishDir  = [
            path: { "${params.outdir}/proteomicslfq" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // ISOBARICANALYZER
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:ISOBARICANALYZER' {
        publishDir  = [
            path: { "${params.outdir}/isobaricanalyzer" },
            mode: params.publish_dir_mode,
            pattern: '*.log',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // IDMAPPER
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:IDMAPPER' {
        publishDir  = [
            path: { "${params.outdir}/idmapper" },
            mode: params.publish_dir_mode,
            pattern: '*.{log,consensusXML}',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // EPIFANY
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:EPIFANY' {
        publishDir  = [
            path: { "${params.outdir}/epifany" },
            mode: params.publish_dir_mode,
            pattern: '*.log',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // PROTEININFERENCER
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:PROTEININFERENCER' {
        publishDir  = [
            path: { "${params.outdir}/proteininferencer" },
            mode: params.publish_dir_mode,
            pattern: '*.log',
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    // EPIFILTER
    withName: 'NFCORE_QUANTMS:QUANTMS:.*:EPIFILTER' {
        ext.args    = [
            "-score:prot \"$params.protein_level_fdr_cutoff\"",
            "-delete_unreferenced_peptide_hits",
            "-remove_decoys"
        ].join(' ').trim()
        ext.suffix  = '.consensusXML'
        publishDir  = [
            path: { "${params.outdir}/epifilter" },
            mode: params.publish_dir_mode,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
}
